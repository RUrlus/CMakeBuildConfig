include(CheckCXXCompilerFlag)

function(CBC_CHECK_CXX_FLAG_SUPPORT FLAG DEST)
    string(SUBSTRING ${FLAG} 1 -1 STRIPPED_FLAG)
    string(REGEX REPLACE "=" "_" STRIPPED_FLAG ${STRIPPED_FLAG})
    string(TOUPPER ${STRIPPED_FLAG} STRIPPED_FLAG)
    set(RES_VAR "${STRIPPED_FLAG}_SUPPORTED")
    check_cxx_compiler_flag("${FLAG}" ${RES_VAR})
    if(${RES_VAR})
        set(${DEST} "${${DEST}} ${FLAG}" PARENT_SCOPE)
    endif()
endfunction()

function(CBC_SET_DEVMODE_FLAGS PKG_PREF)
    set(DEST_VAR "${PKG_PREF}_DEVMODE_FLAGS")
    set(DEV_FLAGS "")
    if((CMAKE_CXX_COMPILER_ID STREQUAL "Clang") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU") OR (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang"))
        CBC_CHECK_CXX_FLAG_SUPPORT(-Wall DEV_FLAGS)
        CBC_CHECK_CXX_FLAG_SUPPORT(-Wextra DEV_FLAGS)
        CBC_CHECK_CXX_FLAG_SUPPORT(-Wunused-variable DEV_FLAGS)
        CBC_CHECK_CXX_FLAG_SUPPORT(-Wunused-const-variable DEV_FLAGS)
        separate_arguments(DEV_FLAGS UNIX_COMMAND "${DEV_FLAGS}")
        set(${DEST_VAR} "${DEV_FLAGS}" PARENT_SCOPE)
    else()
        set(${DEST_VAR} "" PARENT_SCOPE)
    endif()
endfunction()

function(CBC_TEST_ARCH_FLAGS PKG_PREF)
    # -- Compiler Flags
    set(DEST_VAR "${PKG_PREF}_ARCH_FLAGS")
    set(DEST_DEF_VAR "${PKG_PREF}_DEFS")
    if ("${CMAKE_CXX_FLAGS}" STREQUAL "${CMAKE_CXX_FLAGS_DEFAULT}")
        set(ARCH_FLAGS "")
        if (APPLE AND (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "arm64"))
            # see https://github.com/google/highway/issues/745
            CBC_CHECK_CXX_FLAG_SUPPORT("-march=native" ARCH_FLAGS)
        else()
            # -- check SSE --
            include(FindSse)
            CBC_CHECK_FOR_SSE()
            string(APPEND ARCH_FLAGS "${SSE_FLAGS}")
            set(${DEST_DEF_VAR} ${SSE_DEFINITIONS} PARENT_SCOPE)

            # -- check AVX --
            include(FindAvx)
            CBC_CHECK_FOR_AVX()
            string(APPEND ARCH_FLAGS "${AVX_FLAGS}")
        endif()
    endif()

    if (NOT ${ARCH_FLAGS} STREQUAL "")
        string(STRIP ${ARCH_FLAGS} ARCH_FLAGS)
        if (MSVC)
            separate_arguments(ARCH_FLAGS WINDOWS_COMMAND "${ARCH_FLAGS}")
        else()
            separate_arguments(ARCH_FLAGS UNIX_COMMAND "${ARCH_FLAGS}")
        endif()

        set(${DEST_VAR} ${ARCH_FLAGS} PARENT_SCOPE)
    else()
        set(${DEST_VAR} "" PARENT_SCOPE)
        set(${DEST_DEF_VAR} "" PARENT_SCOPE)
    endif()
endfunction()

function(CBC_SET_ARCH_FLAGS TARGET PKG_PREF)
    CBC_SET_DEVMODE_FLAGS(${PKG_PREF})
    CBC_TEST_ARCH_FLAGS(${PKG_PREF})
    # Set SSE definitions
    add_definitions(${${PKG_PREF}_DEFS})
    # Set architecture flags
    target_compile_options(${TARGET} PRIVATE $<$<CONFIG:RELEASE>:${${PKG_PREF}_ARCH_FLAGS}>)
endfunction()
